const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const { googleClientID, googleClientSecret } = require('../config/keys');

const User = mongoose.model('users');

// user parameter comes from strategy response
passport.serializeUser((user, done) => {
  // user.id IS NOT the same as googleId -> it's an unique id automatically generated by MongoDB for each record
  done(null, user.id);
});

passport.deserializeUser((id, done) => {
  User.findById(id).then((user) => {
    done(null, user);
  });
});

// tells passport that you want to authenticate users with Google
passport.use(
  new GoogleStrategy(
    {
      clientID: googleClientID,
      clientSecret: googleClientSecret,
      callbackURL: '/auth/google/callback',
    },
    (accessToken, refreshToken, profile, done) => {
      User.findOne({ googleId: profile.id }).then((existingUser) => {
        if (existingUser) {
          done(null, existingUser);
        } else {
          // the user parameter in done(null, user) gets passed to passport.serializeUser
          new User({ googleId: profile.id }).save().then((user) => done(null, user));
        }
      });
    }
  )
);
